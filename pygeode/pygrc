[Memory]

# Maximum size for arrays before pygeode
# will try to split up data sets when processing.
# On systems with a large amount of memory, increasing
# this can speed up the processing of large data sets.
max_array_size = 268435456

# Maximum size allowed for arrays in temp files
# (Not currently used, but could be useful for 'medium' sized intermediate
#  products which are too big to fit in memory, but are a pain in the ass to
#  recalculate over again.)
MAX_SWAP_SIZE = 4294967296

[ProgressBar]

# Time (in seconds) to wait before displaying progress bars
no_show_time = 5

# Update interval (in seconds) for progress bars
poll_interval = 1

[Axes]

Lon.name = lon
Lon.rtol = 1e-3
Lon.formatstr = %.3g E<360
Lon.plottitle =
Lon.plotfmt = %.3g E

Lat.name = lat
Lat.formatstr = %.2g N
Lat.plottitle =

Height.name = z
Height.formatstr = %d
Height.units = m
Height.plotname = Height

Hybrid.name = eta
Hybrid.formatstr = %g
Hybrid.plotorder = -1
Hybrid.plotscale = log

Pres.name = pres
Pres.units = hPa
Pres.formatstr = %.2g<100
Pres.plotname = Pressure
Pres.plotscale = log
Pres.plotorder = -1

Time.name = time
Time.plottitle =
Time.plotofsfmt =

CalendarTime.formatstr = $b $d, $Y $H:$M:$S
#CalendarTime.autofmts = [(365. , '$Y',       ''),         # Range larger than 1 year
#                         (30.  , '$b $Y',    ''),         # Larger than 1 month
#                         (1.   , '$d $b',    '$Y'),       # Larger than 1 day
#                         (1/24., '$H:$M',    '$d $b $Y'), # Larger than 1 hour
#                         (0.   , '$H:$M:$S', '$d $b $Y')] # Less than 1 hour
CalendarTime.parse_patterns =
   ^((?P<hour>\d{1,2}):(?P<minute>\d{2})(\s|:(?P<second>\d{2}))|^)(?P<day>\d{1,2}) (?P<month>[a-zA-Z]+) (?P<year>\d+)$
   ^(?P<year>\d+)(-(?P<month>\d{2})(-(?P<day>\d{2})(T(?P<hour>\d{2}):(?P<minute>\d{2})(:(?P<second>\d{2}))?)?)?)?$
   ^(?P<year>\d+)(-(?P<day>\d{3})(T(?P<hour>\d{2}):(?P<minute>\d{2})(:(?P<second>\d{2}))?)?)?$

Yearless.plotfmt = $d
Yearless.formatstr = day $d, $H:$M:$S
#Yearless.autofmts = [(1.,    '$d',       ''),       # Larger than 1 day
#                     (1/24., '$H:$M',    'day $d'), # Larger than 1 hour
#                     (0.  ,  '$H:$M:$S', 'day $d')] # Less than 1 hour
Yearless.parse_patterns =
   ^((?P<hour>\d{1,2}):(?P<minute>\d{2})(\s|:(?P<second>\d{2}))|^)(?P<day>\d+)$
   ^(?P<day>\d+)(T(?P<hour>\d{2}):(?P<minute>\d{2})(:(?P<second>\d{2}))?)?$

[Plotting]

# What kind of parentheses to use to wrap around units
# in plot labels
unit_decoration = ()

cmaps_path =

# Specify default divergent and sequential colormaps. The string is parsed as a set of key : value pairs.
# Keys can be either default, or can specify the number of divisions
# Values can be the name of a registered matplotlib colormap
# or a tuple of lists of hues, saturations, and values. You can experiment with
# the settings below to explore how this works.
cmaps_div = 
 4       : ([0.52, 0.48, 0.38, -0.6, -1.0, 0.09, 0.15, 0.24], [0.9, 0.3], [0.5, 0.98])
 3       : ([0.48, 0.38, -0.6, -1.0, 0.09, 0.15],             [0.9, 0.3], [0.5, 0.98])
 2       : ([0.38, -0.6, -1.0, 0.09],                         [0.9, 0.3], [0.5, 0.98])
 1       : ([-0.6, -1.0],                                     [0.9, 0.3], [0.5, 0.98])
 default : RdBu_r

cmaps_seq = 
 6       : ([0.6, 0.38, 0.18, 0.08, 0.01, 0.82], [1., 0.3], [0.5, 0.98])
 5       : ([0.6, 0.38, 0.18, 0.08, 0.01],       [1., 0.3], [0.5, 0.98])
 4       : ([0.6, 0.38, 0.08, 0.01],             [1., 0.3], [0.5, 0.98])
 3       : ([0.6, 0.18, 0.01],                   [1., 0.3], [0.5, 0.98])
 2       : ([0.6, 0.01],                         [1., 0.3], [0.5, 0.98])
 1       : ([0.6],                               [1., 0.3], [0.5, 0.98])
 default : inferno
